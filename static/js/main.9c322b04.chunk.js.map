{"version":3,"sources":["components/todolist/index.jsx","components/header/index.jsx","components/formSearch/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["TodoList","props","data","country","regx","list","sort","a","b","cases","className","length","map","item","index","src","countryInfo","flag","alt","moment","Date","updated","fromNow","String","replace","deaths","recovered","defaultProps","React","memo","Header","recoveries","FormSearch","useState","search","setSearch","timeoutRef","useRef","filterItem","type","value","onChange","event","target","clearTimeout","current","setTimeout","placeholder","i","App","todolist","setTodolist","count","setCount","filterCountry","setFilterCountry","useEffect","axios","get","then","res","catch","err","console","log","getData","callData","interval","setInterval","clearInterval","updateCases","useMemo","reduce","x","y","updateDeaths","updateRecoveries","params","countries","filter","toLowerCase","indexOf","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c322b04.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.css';\n\nimport moment from 'moment';\n\nTodoList.propTypes = {\n    data: PropTypes.array,\n    country: PropTypes.array,\n};\nTodoList.defaultProps = {\n    data: [],\n    country: [],\n}\n\nfunction TodoList(props) {\n    const { data, country } = props;\n    const regx = /(.)(?=(\\d{3})+$)/g;\n    var list = data.sort((a, b) => {\n        return b.cases - a.cases;\n    });\n    return (\n        <div className='wrap'>\n            {\n                country.length ? country.map((item, index) => {\n                    return <div\n                        className='todolistFilter'\n                        key={index}>\n                        <div className='element'>\n                            <img src={item.countryInfo.flag} alt={item.countryInfo.flag} />\n                            <div className='countryName'>\n                                <h2>{item.country}</h2>\n                                <p>{\n\n                                    moment(new Date(item.updated)).fromNow()\n                                }</p>\n                            </div>\n                            <h3>{String(item.cases).replace(regx, '$1,')}</h3>\n                        </div>\n                        <div className='statistic'>\n                            <div className='deaths'>\n                                <h2>{String(item.deaths).replace(regx, '$1,')}</h2>\n                                <span>deaths</span>\n                            </div>\n                            <div className='recoveries'>\n                                <h2>{String(item.recovered).replace(regx, '$1,')}</h2>\n                                <span>recoveries</span>\n                            </div>\n                        </div>\n                    </div>\n                }) : list.map((item, index) => {\n                    return <div className='todolist'\n                        key={index}>\n                        <span>{index + 1}</span>\n                        <img src={item.countryInfo.flag} alt={item.countryInfo.flag} />\n                        <div className='countryName'>\n                            <h2>{item.country}</h2>\n                            <p>{moment(new Date(item.updated)).fromNow()}</p>\n                        </div>\n                        <h3>{String(item.cases).replace(regx, '$1,')}</h3>\n                    </div>\n                })\n            }\n\n        </div>\n    );\n}\n\nexport default React.memo(TodoList);","import React from 'react';\nimport './header.css';\nHeader.propTypes = {\n\n};\n\nfunction Header(props) {\n    const regx = /(.)(?=(\\d{3})+$)/g;\n    const { cases, deaths, recoveries } = props;\n\n    return (\n        <div className='header'>\n            <h1>{String(cases).replace(regx, '$1,')}</h1>\n            <div className='amount'>\n                <div className='deaths'>\n                    <h2>{String(deaths).replace(regx, '$1,')}</h2>\n                    <span>deaths</span>\n                </div>\n                <div className='recoveries'>\n                    <h2>{String(recoveries).replace(regx, '$1,')}</h2>\n                    <span>recoveries</span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default React.memo(Header);","import React, { useRef, useState } from 'react';\nimport './formSearch.css';\nimport PropTypes from 'prop-types';\nFormSearch.propTypes = {\n    filterItem: PropTypes.func,\n};\nFormSearch.defaultProps = {\n    filterItem: null\n}\n\nfunction FormSearch(props) {\n    const [search, setSearch] = useState('');\n    const timeoutRef = useRef();\n    const { filterItem } = props;\n    function onHandleChange(event) {\n        const value = event.target.value;\n        setSearch(value)\n        if (!filterItem) return;\n\n        clearTimeout(timeoutRef);\n\n        timeoutRef.current = setTimeout(() => {\n            var searchValue = {\n                search: value\n            }\n            filterItem(searchValue);\n        }, 500);\n\n    }\n    return (\n        <div className='formSearch'>\n            <input\n                type='text'\n                value={search}\n                onChange={onHandleChange}\n                placeholder='Search country'\n            />\n        </div>\n    );\n}\n\nexport default FormSearch;","import React, { useEffect, useMemo, useState } from 'react';\nimport './App.css';\nimport TodoList from './components/todolist';\nimport Header from './components/header';\nimport FormSearch from './components/formSearch';\n\n\nimport axios from 'axios';\n\nvar i = 0;\nfunction App() {\n  const [todolist, setTodolist] = useState([]);\n  const [count, setCount] = useState(0);\n  const [filterCountry, setFilterCountry] = useState([]);\n\n  useEffect(() => {\n\n    async function callData() {\n      try {\n        const url = 'https://disease.sh/v3/covid-19/countries';\n        var getData = await axios.get(url)\n          .then(function (res) {\n            setTodolist([...res.data]);\n          })\n          .catch(function (err) {\n            console.log(err);\n          })\n      } catch (error) {\n        console.log(error);\n      }\n      return getData;\n    }\n    callData();\n\n    var interval = setInterval(() => {\n      i++;\n      setCount(i);\n    }, 180000);\n\n    return () => {\n      clearInterval(interval);\n    }\n  }, [count]);\n\n  var updateCases = useMemo(() => {\n    var sumCases = todolist.reduce((x, y) => {\n      return x + y.cases;\n    }, 0);\n    // console.log('case ' + sumCases)\n    return sumCases;\n  }, [todolist]);\n\n  var updateDeaths = useMemo(() => {\n    var sumDeaths = todolist.reduce((x, y) => {\n      return x + y.deaths;\n    }, 0);\n    // console.log('death' + sumDeaths)\n    return sumDeaths;\n  }, [todolist]);\n  var updateRecoveries = useMemo(() => {\n    var sumRecoveries = todolist.reduce((x, y) => {\n      return x + y.recovered;\n    }, 0);\n    // console.log('recover')\n    return sumRecoveries;\n  }, [todolist]);\n\n  function onhandleFilter(params) {\n    var countries = todolist.filter((x) => {\n      return x.country.toLowerCase().indexOf(params.search.toLowerCase()) !== -1;\n    });\n    setFilterCountry([...countries]);\n    if (params.search === '' || params.search === null) {\n      setFilterCountry([]);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className='header'>\n        <Header cases={updateCases}\n          deaths={updateDeaths}\n          recoveries={updateRecoveries}\n        />\n        <div>\n          <FormSearch filterItem={onhandleFilter} />\n        </div>\n      </div>\n      <TodoList\n        data={todolist}\n        country={filterCountry}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}